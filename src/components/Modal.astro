---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div class="wrapper">
  <div
    class="container"
    id={`modal-${id}`}
    onclick="
    event.stopPropagation();
    "
  >
    <slot />
  </div>
</div>
<script is:inline>
function showModal(modalId) {
  const wrapper = document.getElementById(`modal-${modalId}`)?.parentElement;
  if (!wrapper) return;
  wrapper.style.display = "flex";
}
function closeModal(modalId) {
  const wrapper = document.getElementById(`modal-${modalId}`)?.parentElement;
  if (!wrapper) return;
  wrapper.style.display = "none";
}
</script>
<script define:vars={{ modalId: id }}>
const modal = document.getElementById(`modal-${modalId}`);
const wrapper = modal.parentElement;

wrapper.style.display = "none";

wrapper.addEventListener("click", () => {
  wrapper.style.display = "none";
});
</script>
<style>
  .wrapper {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1001;

    width: 100%;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);

    display: flex;
    justify-content: center;
    align-items: center;

    animation: fadeIn 0.2s ease-out;
  }

  .container {
    width: 100%;
    max-width: 480px;
    max-height: 80%;
    margin: 0 20px;

    padding: 16px;
    border-radius: 8px;
    background-color: #fff;

    animation: scaleIn 0.3s cubic-bezier(0, 0, 0, 1);
  }

  @keyframes scaleIn {
    from {
      transform: scale(1.08);
    }
    to {
      transform: scale(1);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
